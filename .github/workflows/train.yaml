# Name of the workflow (visible in the GitHub Actions UI)
name: Train and Deploy FastAPI ML App

# Trigger this workflow whenever code is pushed to the main branch
on:
  push:
    branches: [ main ]

# Define the main job
jobs:
  train-and-deploy:
    # Use the latest Ubuntu GitHub Actions runner
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository code to the GitHub runner
      - name: Checkout repo
        uses: actions/checkout@v3

      # Step 2: Set up Python 3.10 on the runner
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # Step 3: Install dependencies needed for training and deployment
      - name: Install dependencies
        run: |
          pip install -r requirements.txt             # Install base Python packages
          pip install dvc[aws] mlflow boto3           # Add DVC, MLflow, AWS SDK for tracking and S3 access

      # Step 4: Configure AWS credentials from GitHub Secrets
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}          # Secure AWS access key
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  # Secure AWS secret
          aws-region: us-east-1                                      # Your AWS region

      # Step 5: Pull training data and previous artifacts from remote DVC storage (e.g., S3)
      - name: Pull data via DVC
        run: dvc pull --force

      # Step 6: Reproduce the DVC pipeline (e.g., train and evaluate model)
      - name: Reproduce DVC pipeline
        run: dvc repro

      # Step 7: Push updated model or metrics back to remote DVC storage
      - name: Push DVC outputs
        run: dvc push

      # Step 8: Commit changes (e.g., updated .dvc, metrics) if any were made during training
      - name: Commit changes
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "ci@github.com"
          git add .
          git commit -m "Auto: new model trained by CI" || echo "Nothing to commit"
          git push || echo "Nothing to push"

      # Step 9: Authenticate Docker with Amazon ECR
      - name: mlops
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Step 10: Build Docker image for FastAPI app
      - name: Build Docker image
        run: |
          docker build -t mlops .                                               # Build image using Dockerfile in root
          docker tag mlops:latest ${{ steps.login-ecr.outputs.registry }}/mlops:latest  # Tag image for ECR

      # Step 11: Push the image to your ECR repository
      - name: Push Docker image to ECR
        run: |
          docker push ${{ steps.login-ecr.outputs.registry }}/mlops:latest      # Upload image to ECR
